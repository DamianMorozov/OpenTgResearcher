// <auto-generated />
#nullable disable

namespace TgStorage.Migrations.TgEfConsole
{
    [DbContext(typeof(TgEfConsoleContext))]
    partial class TgEfContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("TgStorage.Domain.Apps.TgEfAppEntity", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("UID");

                    b.Property<Guid>("ApiHash")
                        .IsConcurrencyToken()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("API_HASH");

                    b.Property<int>("ApiId")
                        .IsConcurrencyToken()
                        .HasColumnType("INT")
                        .HasColumnName("API_ID");

                    b.Property<string>("BotTokenKey")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("BOT_TOKEN_KEY");

                    b.Property<string>("FirstName")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("NVARCHAR(64)")
                        .HasColumnName("LAST_NAME");

                    b.Property<string>("PhoneNumber")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR(20)")
                        .HasColumnName("PHONE_NUMBER");

                    b.Property<Guid?>("ProxyUid")
                        .IsConcurrencyToken()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("PROXY_UID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<bool>("UseBot")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("USE_BOT");

                    b.Property<bool>("UseClient")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("USE_CLIENT");

                    b.HasKey("Uid");

                    b.HasAlternateKey("ApiHash");

                    b.HasIndex("ApiHash")
                        .IsUnique();

                    b.HasIndex("ApiId");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("ProxyUid");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("APPS", (string)null);
                });

            modelBuilder.Entity("TgStorage.Domain.ChatUsers.TgEfChatUserEntity", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("UID");

                    b.Property<long>("ChatId")
                        .IsConcurrencyToken()
                        .HasColumnType("LONG(20)")
                        .HasColumnName("CHAT_ID");

                    b.Property<DateTime>("DtChanged")
                        .IsConcurrencyToken()
                        .HasColumnType("DATETIME")
                        .HasColumnName("DT_CHANGED");

                    b.Property<bool>("IsDeleted")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_DELETED");

                    b.Property<bool>("IsMuted")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_MUTED");

                    b.Property<DateTime>("JoinedAt")
                        .IsConcurrencyToken()
                        .HasColumnType("DATETIME")
                        .HasColumnName("JOINED_AT");

                    b.Property<DateTime?>("MutedUntil")
                        .IsConcurrencyToken()
                        .HasColumnType("DATETIME")
                        .HasColumnName("MUTED_UNTIL");

                    b.Property<int>("Role")
                        .IsConcurrencyToken()
                        .HasColumnType("INT")
                        .HasColumnName("ROLE");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<long>("UserId")
                        .HasColumnType("LONG(20)")
                        .HasColumnName("USER_ID");

                    b.HasKey("Uid");

                    b.HasIndex("ChatId");

                    b.HasIndex("DtChanged");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("IsMuted");

                    b.HasIndex("JoinedAt");

                    b.HasIndex("Role");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("ChatId", "UserId")
                        .IsUnique();

                    b.ToTable("CHAT_USERS", (string)null);
                });

            modelBuilder.Entity("TgStorage.Domain.Documents.TgEfDocumentEntity", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("UID");

                    b.Property<long>("AccessHash")
                        .IsConcurrencyToken()
                        .HasColumnType("LONG(20)")
                        .HasColumnName("ACCESS_HASH");

                    b.Property<string>("FileName")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR(256)")
                        .HasColumnName("FILE_NAME");

                    b.Property<long>("FileSize")
                        .IsConcurrencyToken()
                        .HasColumnType("LONG(20)")
                        .HasColumnName("FILE_SIZE");

                    b.Property<long>("Id")
                        .IsConcurrencyToken()
                        .HasColumnType("LONG(20)")
                        .HasColumnName("ID");

                    b.Property<int>("MessageId")
                        .IsConcurrencyToken()
                        .HasColumnType("INT")
                        .HasColumnName("MESSAGE_ID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<long>("SourceId")
                        .IsConcurrencyToken()
                        .HasColumnType("LONG(20)")
                        .HasColumnName("SOURCE_ID");

                    b.HasKey("Uid");

                    b.HasIndex("AccessHash");

                    b.HasIndex("FileName");

                    b.HasIndex("FileSize");

                    b.HasIndex("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("SourceId");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("DOCUMENTS", (string)null);
                });

            modelBuilder.Entity("TgStorage.Domain.Filters.TgEfFilterEntity", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("UID");

                    b.Property<int>("FilterType")
                        .IsConcurrencyToken()
                        .HasColumnType("INT")
                        .HasColumnName("FILTER_TYPE");

                    b.Property<bool>("IsEnabled")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_ENABLED");

                    b.Property<string>("Mask")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR(128)")
                        .HasColumnName("MASK");

                    b.Property<string>("Name")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR(128)")
                        .HasColumnName("NAME");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<long>("Size")
                        .IsConcurrencyToken()
                        .HasColumnType("LONG(20)")
                        .HasColumnName("SIZE");

                    b.Property<int>("SizeType")
                        .IsConcurrencyToken()
                        .HasColumnType("INT")
                        .HasColumnName("SIZE_TYPE");

                    b.HasKey("Uid");

                    b.HasIndex("FilterType");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("Mask");

                    b.HasIndex("Name");

                    b.HasIndex("Size");

                    b.HasIndex("SizeType");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("FILTERS", (string)null);
                });

            modelBuilder.Entity("TgStorage.Domain.Licenses.TgEfLicenseEntity", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("UID");

                    b.Property<bool>("IsConfirmed")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_CONFIRMED");

                    b.Property<Guid>("LicenseKey")
                        .IsConcurrencyToken()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("LICENSE_KEY");

                    b.Property<int>("LicenseType")
                        .IsConcurrencyToken()
                        .HasColumnType("INT(1)")
                        .HasColumnName("LICENSE_TYPE");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<long>("UserId")
                        .IsConcurrencyToken()
                        .HasColumnType("LONG(20)")
                        .HasColumnName("USER_ID");

                    b.Property<DateTime>("ValidTo")
                        .IsConcurrencyToken()
                        .HasColumnType("DATETIME")
                        .HasColumnName("VALID_TO");

                    b.HasKey("Uid");

                    b.HasAlternateKey("LicenseKey");

                    b.HasIndex("IsConfirmed");

                    b.HasIndex("LicenseKey")
                        .IsUnique();

                    b.HasIndex("LicenseType");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("ValidTo");

                    b.ToTable("LICENSES", (string)null);
                });

            modelBuilder.Entity("TgStorage.Domain.Messages.TgEfMessageEntity", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("UID");

                    b.Property<DateTime>("DtCreated")
                        .IsConcurrencyToken()
                        .HasColumnType("DATETIME")
                        .HasColumnName("DT_CREATED");

                    b.Property<int>("Id")
                        .IsConcurrencyToken()
                        .HasColumnType("INT")
                        .HasColumnName("ID");

                    b.Property<bool>("IsDeleted")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("Message")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("MESSAGE");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<long>("Size")
                        .IsConcurrencyToken()
                        .HasColumnType("LONG(20)")
                        .HasColumnName("SIZE");

                    b.Property<long>("SourceId")
                        .IsConcurrencyToken()
                        .HasColumnType("LONG(20)")
                        .HasColumnName("SOURCE_ID");

                    b.Property<int>("Type")
                        .IsConcurrencyToken()
                        .HasColumnType("INT")
                        .HasColumnName("TYPE");

                    b.Property<long>("UserId")
                        .HasColumnType("LONG(20)")
                        .HasColumnName("USER_ID");

                    b.HasKey("Uid");

                    b.HasIndex("DtCreated");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Message");

                    b.HasIndex("Size");

                    b.HasIndex("SourceId");

                    b.HasIndex("Type");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("MESSAGES", (string)null);
                });

            modelBuilder.Entity("TgStorage.Domain.Messages.TgEfMessageRelationEntity", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("UID");

                    b.Property<int>("ChildMessageId")
                        .IsConcurrencyToken()
                        .HasColumnType("INT")
                        .HasColumnName("CHILD_MESSAGE_ID");

                    b.Property<long>("ChildSourceId")
                        .IsConcurrencyToken()
                        .HasColumnType("LONG(20)")
                        .HasColumnName("CHILD_SOURCE_ID");

                    b.Property<int>("ParentMessageId")
                        .IsConcurrencyToken()
                        .HasColumnType("INT")
                        .HasColumnName("PARENT_MESSAGE_ID");

                    b.Property<long>("ParentSourceId")
                        .IsConcurrencyToken()
                        .HasColumnType("LONG(20)")
                        .HasColumnName("PARENT_SOURCE_ID");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.HasKey("Uid");

                    b.HasIndex("ChildMessageId");

                    b.HasIndex("ChildSourceId");

                    b.HasIndex("ParentMessageId");

                    b.HasIndex("ParentSourceId");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("ChildSourceId", "ChildMessageId");

                    b.HasIndex("ParentSourceId", "ParentMessageId", "ChildSourceId", "ChildMessageId")
                        .IsUnique()
                        .HasDatabaseName("IX_MESSAGES_RELATIONS_UNIQUE_LINK");

                    b.ToTable("MESSAGES_RELATIONS", (string)null);
                });

            modelBuilder.Entity("TgStorage.Domain.Proxies.TgEfProxyEntity", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("UID");

                    b.Property<string>("HostName")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR(128)")
                        .HasColumnName("HOST_NAME");

                    b.Property<string>("Password")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR(128)")
                        .HasColumnName("PASSWORD");

                    b.Property<ushort>("Port")
                        .IsConcurrencyToken()
                        .HasColumnType("INT(5)")
                        .HasColumnName("PORT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("Secret")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR(128)")
                        .HasColumnName("SECRET");

                    b.Property<int>("Type")
                        .IsConcurrencyToken()
                        .HasColumnType("INT")
                        .HasColumnName("TYPE");

                    b.Property<string>("UserName")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR(128)")
                        .HasColumnName("USER_NAME");

                    b.HasKey("Uid");

                    b.HasIndex("HostName");

                    b.HasIndex("Password");

                    b.HasIndex("Port");

                    b.HasIndex("Secret");

                    b.HasIndex("Type");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("UserName");

                    b.ToTable("PROXIES", (string)null);
                });

            modelBuilder.Entity("TgStorage.Domain.Sources.TgEfSourceEntity", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("UID");

                    b.Property<string>("About")
                        .IsConcurrencyToken()
                        .HasMaxLength(1024)
                        .HasColumnType("NVARCHAR(1024)")
                        .HasColumnName("ABOUT");

                    b.Property<long>("AccessHash")
                        .IsConcurrencyToken()
                        .HasColumnType("LONG(20)")
                        .HasColumnName("ACCESS_HASH");

                    b.Property<int>("Count")
                        .IsConcurrencyToken()
                        .HasColumnType("INT")
                        .HasColumnName("COUNT");

                    b.Property<int>("CountThreads")
                        .IsConcurrencyToken()
                        .HasColumnType("INT")
                        .HasColumnName("COUNT_THREADS");

                    b.Property<string>("Directory")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR(256)")
                        .HasColumnName("DIRECTORY");

                    b.Property<DateTime>("DtChanged")
                        .IsConcurrencyToken()
                        .HasColumnType("DATETIME")
                        .HasColumnName("DT_CHANGED");

                    b.Property<int>("FirstId")
                        .IsConcurrencyToken()
                        .HasColumnType("INT")
                        .HasColumnName("FIRST_ID");

                    b.Property<long>("Id")
                        .IsConcurrencyToken()
                        .HasColumnType("LONG(20)")
                        .HasColumnName("ID");

                    b.Property<bool>("IsActive")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IsAutoUpdate")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_AUTO_UPDATE");

                    b.Property<bool>("IsCreatingSubdirectories")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_CREATING_SUBDIRS");

                    b.Property<bool>("IsDownloadThumbnail")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_THUMB");

                    b.Property<bool>("IsFileNamingByMessage")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_FILE_NAMING_BY_MESSAGE");

                    b.Property<bool>("IsJoinFileNameWithMessageId")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_FILE_WITH_ID");

                    b.Property<bool>("IsParsingComments")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_PARSING_COMMENTS");

                    b.Property<bool>("IsRestrictSavingContent")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_RESTRICT_SAVING_CONTENT");

                    b.Property<bool>("IsRewriteFiles")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_REWRITE_FILES");

                    b.Property<bool>("IsRewriteMessages")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_REWRITE_MSG");

                    b.Property<bool>("IsSaveFiles")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_SAVE_FILES");

                    b.Property<bool>("IsSaveMessages")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_SAVE_MSG");

                    b.Property<bool>("IsSubscribe")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_SUBSCRIBE");

                    b.Property<bool>("IsUserAccess")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_USER_ACCESS");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("Title")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR(256)")
                        .HasColumnName("TITLE");

                    b.Property<string>("UserName")
                        .IsConcurrencyToken()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR(128)")
                        .HasColumnName("USER_NAME");

                    b.HasKey("Uid");

                    b.HasIndex("AccessHash");

                    b.HasIndex("Count");

                    b.HasIndex("CountThreads");

                    b.HasIndex("Directory");

                    b.HasIndex("DtChanged");

                    b.HasIndex("FirstId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("IsAutoUpdate");

                    b.HasIndex("IsCreatingSubdirectories");

                    b.HasIndex("IsDownloadThumbnail");

                    b.HasIndex("IsFileNamingByMessage");

                    b.HasIndex("IsJoinFileNameWithMessageId");

                    b.HasIndex("IsParsingComments");

                    b.HasIndex("IsRestrictSavingContent");

                    b.HasIndex("IsRewriteFiles");

                    b.HasIndex("IsRewriteMessages");

                    b.HasIndex("IsSaveFiles");

                    b.HasIndex("IsSaveMessages");

                    b.HasIndex("IsSubscribe");

                    b.HasIndex("IsUserAccess");

                    b.HasIndex("Title");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("UserName");

                    b.ToTable("SOURCES", (string)null);
                });

            modelBuilder.Entity("TgStorage.Domain.Stories.TgEfStoryEntity", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("UID");

                    b.Property<string>("Caption")
                        .IsConcurrencyToken()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR(128)")
                        .HasColumnName("CAPTION");

                    b.Property<DateTime?>("Date")
                        .IsConcurrencyToken()
                        .HasColumnType("DATETIME")
                        .HasColumnName("DATE");

                    b.Property<DateTime>("DtChanged")
                        .IsConcurrencyToken()
                        .HasColumnType("DATETIME")
                        .HasColumnName("DT_CHANGED");

                    b.Property<DateTime?>("ExpireDate")
                        .IsConcurrencyToken()
                        .HasColumnType("DATETIME")
                        .HasColumnName("EXPIRE_DATE");

                    b.Property<long>("FromId")
                        .IsConcurrencyToken()
                        .HasColumnType("LONG(20)")
                        .HasColumnName("FROM_ID");

                    b.Property<string>("FromName")
                        .IsConcurrencyToken()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR(128)")
                        .HasColumnName("FROM_NAME");

                    b.Property<long>("Id")
                        .IsConcurrencyToken()
                        .HasColumnType("LONG(20)")
                        .HasColumnName("ID");

                    b.Property<int>("Length")
                        .IsConcurrencyToken()
                        .HasColumnType("INT(20)")
                        .HasColumnName("LENGTH");

                    b.Property<string>("Message")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR(256)")
                        .HasColumnName("MESSAGE");

                    b.Property<int>("Offset")
                        .IsConcurrencyToken()
                        .HasColumnType("INT(20)")
                        .HasColumnName("OFFSET");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("Type")
                        .IsConcurrencyToken()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR(128)")
                        .HasColumnName("TYPE");

                    b.HasKey("Uid");

                    b.HasAlternateKey("Id", "FromId");

                    b.HasIndex("Caption");

                    b.HasIndex("Date");

                    b.HasIndex("DtChanged");

                    b.HasIndex("ExpireDate");

                    b.HasIndex("FromId");

                    b.HasIndex("FromName");

                    b.HasIndex("Id");

                    b.HasIndex("Type");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("STORIES", (string)null);
                });

            modelBuilder.Entity("TgStorage.Domain.Users.TgEfUserEntity", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("UID");

                    b.Property<long>("AccessHash")
                        .IsConcurrencyToken()
                        .HasColumnType("LONG(20)")
                        .HasColumnName("ACCESS_HASH");

                    b.Property<int>("BotActiveUsers")
                        .IsConcurrencyToken()
                        .HasColumnType("INT(20)")
                        .HasColumnName("BOT_ACTIVE_USERS");

                    b.Property<string>("BotInfoVersion")
                        .IsConcurrencyToken()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR(20)")
                        .HasColumnName("BOT_INFO_VERSION");

                    b.Property<string>("BotInlinePlaceholder")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR(128)")
                        .HasColumnName("BOT_INLINE_PLACEHOLDER");

                    b.Property<DateTime>("DtChanged")
                        .IsConcurrencyToken()
                        .HasColumnType("DATETIME")
                        .HasColumnName("DT_CHANGED");

                    b.Property<string>("FirstName")
                        .IsConcurrencyToken()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR(128)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<long>("Id")
                        .IsConcurrencyToken()
                        .HasColumnType("LONG(20)")
                        .HasColumnName("ID");

                    b.Property<bool>("IsActive")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IsBot")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_BOT");

                    b.Property<bool>("IsContact")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_CONTACT");

                    b.Property<bool>("IsDeleted")
                        .IsConcurrencyToken()
                        .HasColumnType("BIT")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("LangCode")
                        .IsConcurrencyToken()
                        .HasMaxLength(16)
                        .HasColumnType("NVARCHAR(16)")
                        .HasColumnName("LANG_CODE");

                    b.Property<string>("LastName")
                        .IsConcurrencyToken()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR(128)")
                        .HasColumnName("LAST_NAME");

                    b.Property<string>("PhoneNumber")
                        .IsConcurrencyToken()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR(20)")
                        .HasColumnName("PHONE_NUMBER");

                    b.Property<string>("RestrictionReason")
                        .IsConcurrencyToken()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR(128)")
                        .HasColumnName("RESTRICTION_REASON");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("Status")
                        .IsConcurrencyToken()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR(20)")
                        .HasColumnName("STATUS");

                    b.Property<int>("StoriesMaxId")
                        .IsConcurrencyToken()
                        .HasColumnType("INT(20)")
                        .HasColumnName("STORIES_MAX_ID");

                    b.Property<string>("UserName")
                        .IsConcurrencyToken()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR(128)")
                        .HasColumnName("USER_NAME");

                    b.Property<string>("UserNames")
                        .IsConcurrencyToken()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR(128)")
                        .HasColumnName("USER_NAMES");

                    b.HasKey("Uid");

                    b.HasIndex("AccessHash");

                    b.HasIndex("DtChanged");

                    b.HasIndex("FirstName");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("IsBot");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("LangCode");

                    b.HasIndex("LastName");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("Status");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("UserName");

                    b.ToTable("USERS", (string)null);
                });

            modelBuilder.Entity("TgStorage.Domain.Versions.TgEfVersionEntity", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("UID");

                    b.Property<string>("Description")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR(128)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<short>("Version")
                        .IsConcurrencyToken()
                        .HasMaxLength(4)
                        .HasColumnType("SMALLINT")
                        .HasColumnName("VERSION");

                    b.HasKey("Uid");

                    b.HasAlternateKey("Version");

                    b.HasIndex("Description");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("Version")
                        .IsUnique();

                    b.ToTable("VERSIONS", (string)null);
                });

            modelBuilder.Entity("TgStorage.Domain.Apps.TgEfAppEntity", b =>
                {
                    b.HasOne("TgStorage.Domain.Proxies.TgEfProxyEntity", "Proxy")
                        .WithMany("Apps")
                        .HasForeignKey("ProxyUid");

                    b.Navigation("Proxy");
                });

            modelBuilder.Entity("TgStorage.Domain.ChatUsers.TgEfChatUserEntity", b =>
                {
                    b.HasOne("TgStorage.Domain.Sources.TgEfSourceEntity", "Chat")
                        .WithMany("ChatUsers")
                        .HasForeignKey("ChatId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TgStorage.Domain.Users.TgEfUserEntity", "User")
                        .WithMany("ChatUsers")
                        .HasForeignKey("UserId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TgStorage.Domain.Documents.TgEfDocumentEntity", b =>
                {
                    b.HasOne("TgStorage.Domain.Sources.TgEfSourceEntity", "Source")
                        .WithMany("Documents")
                        .HasForeignKey("SourceId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TgStorage.Domain.Messages.TgEfMessageEntity", b =>
                {
                    b.HasOne("TgStorage.Domain.Sources.TgEfSourceEntity", "Source")
                        .WithMany("Messages")
                        .HasForeignKey("SourceId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TgStorage.Domain.Messages.TgEfMessageRelationEntity", b =>
                {
                    b.HasOne("TgStorage.Domain.Sources.TgEfSourceEntity", "ChildSource")
                        .WithMany()
                        .HasForeignKey("ChildSourceId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TgStorage.Domain.Sources.TgEfSourceEntity", "ParentSource")
                        .WithMany()
                        .HasForeignKey("ParentSourceId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TgStorage.Domain.Messages.TgEfMessageEntity", "ChildMessage")
                        .WithMany()
                        .HasForeignKey("ChildSourceId", "ChildMessageId")
                        .HasPrincipalKey("SourceId", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TgStorage.Domain.Messages.TgEfMessageEntity", "ParentMessage")
                        .WithMany()
                        .HasForeignKey("ParentSourceId", "ParentMessageId")
                        .HasPrincipalKey("SourceId", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChildMessage");

                    b.Navigation("ChildSource");

                    b.Navigation("ParentMessage");

                    b.Navigation("ParentSource");
                });

            modelBuilder.Entity("TgStorage.Domain.Proxies.TgEfProxyEntity", b =>
                {
                    b.Navigation("Apps");
                });

            modelBuilder.Entity("TgStorage.Domain.Sources.TgEfSourceEntity", b =>
                {
                    b.Navigation("ChatUsers");

                    b.Navigation("Documents");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("TgStorage.Domain.Users.TgEfUserEntity", b =>
                {
                    b.Navigation("ChatUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
